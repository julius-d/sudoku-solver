{"version":3,"sources":["sudoku/SudokuEventType.tsx","SudokuField.tsx","App.js","serviceWorker.js","index.js","sudoku.worker.js"],"names":["SudokuEventType","SudokuField","React","memo","props","rowNumber","colNumber","foundNumber","cantBes","handleChange","fieldName","numberFoundBy","borderClassName","classNames","createBorderClassName","className","style","fontSize","fontWeight","type","pattern","inputMode","maxLength","size","name","value","onChange","autoComplete","join","App","componentDidMount","that","worker","Worker","onmessage","e","console","log","x","data","position","xKoordinate","y","yKoordinate","number","CANT_BE","setState","prevState","notArray","prevStateElement","includes","concat","sort","NUMBER_FOUND","state","nameFoundBy","from","keyNot","bind","event","target","parseInt","this","postMessage","eventType","field","replace","split","map","it","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_public_path__"],"mappings":"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","file":"static/js/main.4fa1b5a5.chunk.js","sourcesContent":["enum SudokuEventType {\n  CANT_BE,\n  NUMBER_FOUND\n}\nexport default SudokuEventType;\n","import React from \"react\";\n\ninterface SudokuFieldProps {\n  rowNumber: number;\n  colNumber: number;\n  foundNumber: number | undefined;\n  cantBes: number[];\n  fieldName: string;\n  numberFoundBy: string;\n  handleChange: () => void;\n}\n\nfunction createBorderClassName(rowNumber: number, colNumber: number) {\n  let classNames = \"\";\n  if (rowNumber % 3 === 0) {\n    classNames += \"strong-border-top \";\n  }\n  if ((rowNumber + 1) % 3 === 0) {\n    classNames += \"strong-border-bottom \";\n  }\n  if ((colNumber + 1) % 3 === 0) {\n    classNames += \"strong-border-right \";\n  }\n  if (colNumber % 3 === 0) {\n    classNames += \"strong-border-left \";\n  }\n  return classNames;\n}\n\nconst SudokuField: React.FunctionComponent<SudokuFieldProps> = React.memo(\n  props => {\n    const {\n      rowNumber,\n      colNumber,\n      foundNumber,\n      cantBes,\n      handleChange,\n      fieldName,\n      numberFoundBy\n    } = props;\n\n    const borderClassName = createBorderClassName(rowNumber, colNumber);\n    return (\n      <td className={`tg-0lax ${borderClassName}`}>\n        {foundNumber ? (\n          <div\n            style={{\n              fontSize: 24,\n              fontWeight: numberFoundBy === \"USER\" ? \"bold\" : \"normal\"\n            }}\n          >\n            {foundNumber}\n          </div>\n        ) : (\n          <>\n            <input\n              type=\"text\"\n              pattern=\"[0-9]*\"\n              inputMode=\"numeric\"\n              maxLength={1}\n              size={1}\n              name={fieldName}\n              value={\"\"}\n              onChange={handleChange}\n              autoComplete=\"sudoku\"\n            />\n            <br />\n            <s>{cantBes.join(\" \")}</s>\n          </>\n        )}\n      </td>\n    );\n  }\n);\n\nexport default SudokuField;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Worker from \"./sudoku.worker.js\";\nimport SudokuEventType from \"./sudoku/SudokuEventType\";\nimport SudokuField from \"./SudokuField\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    for (let x = 0; x < 9; x++) {\n      for (let y = 0; y < 9; y++) {\n        const keyNot = `field_${x}_${y}_not`;\n        this.state[keyNot] = [];\n      }\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount = () => {\n    const that = this;\n    this.worker = new Worker();\n    this.worker.onmessage = function(e) {\n      console.log(\"Message received from worker\", e);\n      const x = e.data.position.xKoordinate;\n      const y = e.data.position.yKoordinate;\n      const value = e.data.number;\n      const type = e.data.type;\n\n      if (type === SudokuEventType.CANT_BE) {\n        const name = `field_${x}_${y}_not`;\n        that.setState(function(prevState) {\n          let prevStateElement = prevState[name];\n          let notArray;\n          if (!prevStateElement.includes(value)) {\n            notArray = prevStateElement.concat([value]).sort();\n          } else {\n            notArray = prevStateElement;\n          }\n          return { [name]: notArray };\n        });\n      } else if (type === SudokuEventType.NUMBER_FOUND) {\n        const name = `field_${x}_${y}`;\n        if (!that.state[name]) {\n          const nameFoundBy = `field_${x}_${y}_found_by`;\n          that.setState({\n            [name]: value,\n            [nameFoundBy]: e.data.from\n          });\n        }\n      }\n    };\n  };\n\n  handleChange(event) {\n    const target = event.target;\n    const value = parseInt(target.value, 10);\n    const name = target.name;\n    const nameFoundBy = name + \"_found_by\";\n\n    if (!(value >= 1 && value <= 9)) {\n      return;\n    }\n    if (this.state[name + \"_not\"].includes(value)) {\n      return;\n    }\n\n    this.setState({\n      [name]: value,\n      [nameFoundBy]: \"USER\"\n    });\n\n    this.worker.postMessage({\n      eventType: \"NUMBER_PROVIDED\",\n      value,\n      field: name\n        .replace(\"field_\", \"\")\n        .split(\"_\")\n        .map(it => parseInt(it))\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <table className=\"tg\">\n          <tbody>\n            {[0, 1, 2, 3, 4, 5, 6, 7, 8].map(rowNumber => (\n              <tr key={`row_${rowNumber}`}>\n                {[0, 1, 2, 3, 4, 5, 6, 7, 8].map(colNumber => (\n                  <SudokuField\n                    key={`field_${rowNumber}_${colNumber}`}\n                    rowNumber={rowNumber}\n                    colNumber={colNumber}\n                    cantBes={this.state[`field_${rowNumber}_${colNumber}_not`]}\n                    foundNumber={this.state[`field_${rowNumber}_${colNumber}`]}\n                    fieldName={`field_${rowNumber}_${colNumber}`}\n                    numberFoundBy={\n                      this.state[`field_${rowNumber}_${colNumber}_found_by`]\n                    }\n                    handleChange={this.handleChange}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"d02b45e9d4bc82bf26e5.worker.js\");\n};"],"sourceRoot":""}