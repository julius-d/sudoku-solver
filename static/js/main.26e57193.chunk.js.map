{"version":3,"sources":["sudoku/SudokuEventType.tsx","SudokuField.tsx","App.js","serviceWorker.js","index.js","sudoku.worker.js"],"names":["SudokuEventType","SudokuField","React","memo","props","rowNumber","colNumber","foundNumber","cantBes","handleChange","fieldName","borderClassName","classNames","createBorderClassName","className","style","fontSize","type","maxLength","size","name","value","onChange","autoComplete","join","App","componentDidMount","that","worker","Worker","onmessage","e","console","log","x","data","position","xKoordinate","y","yKoordinate","number","CANT_BE","setState","prevState","notArray","prevStateElement","includes","concat","sort","NUMBER_FOUND","state","keyNot","bind","event","target","parseInt","this","postMessage","eventType","field","replace","split","map","it","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_public_path__"],"mappings":"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","file":"static/js/main.26e57193.chunk.js","sourcesContent":["\nenum SudokuEventType {\n  CANT_BE,\n  NUMBER_FOUND\n}\nexport default SudokuEventType\n","import React from \"react\";\n\ninterface SudokuFieldProps {\n  rowNumber: number,\n  colNumber: number,\n  foundNumber: number | undefined,\n  cantBes: number[],\n  fieldName :string,\n  handleChange : () => void\n}\n\nfunction createBorderClassName(rowNumber: number, colNumber: number) {\n  let classNames = \"\";\n  if (rowNumber % 3 === 0) {\n    classNames += \"strong-border-top \";\n  }\n  if ((rowNumber+1) % 3 === 0) {\n    classNames += \"strong-border-bottom \";\n  }\n  if ((colNumber+1) % 3 === 0) {\n    classNames += \"strong-border-right \";\n  } if ((colNumber) % 3 === 0) {\n    classNames += \"strong-border-left \";\n  }\n  return classNames;\n\n}\n\nconst SudokuField: React.FunctionComponent<SudokuFieldProps> = React.memo((props) => {\n  const {rowNumber, colNumber, foundNumber, cantBes, handleChange, fieldName} = props;\n\n  const borderClassName = createBorderClassName(rowNumber, colNumber);\n  return <td className={`tg-0lax ${borderClassName}`}>\n    {foundNumber ?\n        <div style={{fontSize  : 24}}>{foundNumber}</div> :\n\n        <><input type=\"text\"\n                 maxLength={1}\n                 size={1}\n                 name={fieldName}\n                 value={\"\"}\n                 onChange={handleChange}\n                 autoComplete=\"sudoku\"\n        />\n          <br/><s>{cantBes.join(\" \")}</s>\n        </>}\n  </td>;\n});\n\nexport default SudokuField;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Worker from './sudoku.worker.js';\nimport SudokuEventType from \"./sudoku/SudokuEventType\";\nimport SudokuField from \"./SudokuField\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    for (let x = 0; x < 9; x++) {\n      for (let y = 0; y < 9; y++) {\n        const keyNot = `field_${x}_${y}_not`;\n        this.state[keyNot] = [];\n      }\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount = () => {\n    const that = this;\n    this.worker = new Worker();\n    this.worker.onmessage = function (e) {\n      console.log('Message received from worker', e);\n      const x = e.data.position.xKoordinate;\n      const y = e.data.position.yKoordinate;\n      const value = e.data.number;\n      const type = e.data.type;\n\n      if (type === SudokuEventType.CANT_BE) {\n        const name = `field_${x}_${y}_not`;\n        that.setState(function (prevState) {\n          let prevStateElement = prevState[name];\n          let notArray;\n          if (!prevStateElement.includes(value)) {\n            notArray = prevStateElement.concat([value]).sort();\n          } else {\n            notArray = prevStateElement;\n          }\n          return {[name]: notArray}\n        });\n      } else if(type === SudokuEventType.NUMBER_FOUND){\n        const name = `field_${x}_${y}`;\n        that.setState({[name]: value});\n      }\n\n    }\n  };\n\n  handleChange(event) {\n    const target = event.target;\n    const value = parseInt(target.value, 10);\n    const name = target.name;\n    if (!(value >= 1 && value <= 9)) {\n      return\n    }\n    if (this.state[name + \"_not\"].includes(value)) {\n      return;\n    }\n\n    this.setState({\n      [name]: value\n    });\n\n    this.worker.postMessage({\n      eventType: \"NUMBER_PROVIDED\",\n      value,\n      field: name.replace(\"field_\", \"\").split(\"_\").map(it => parseInt(it))\n    });\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          Sudoku LÃ¶ser\n           <table className=\"tg\">\n            <tbody>\n            {[0, 1, 2, 3, 4, 5, 6, 7, 8].map(rowNumber =>\n                <tr key={`row_${rowNumber}`}>\n                  {[0, 1, 2, 3, 4, 5, 6, 7, 8]\n                  .map(colNumber =>\n                          <SudokuField key={`field_${rowNumber}_${colNumber}`}\n                              rowNumber={rowNumber}\n                              colNumber={colNumber}\n                              cantBes={this.state[`field_${rowNumber}_${colNumber}_not`]}\n                              foundNumber={this.state[`field_${rowNumber}_${colNumber}`]}\n                              fieldName={`field_${rowNumber}_${colNumber}`}\n                              handleChange={this.handleChange}\n                          />\n                  )}\n                </tr>)}\n            </tbody>\n          </table>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"52967cd8125bf724e84d.worker.js\");\n};"],"sourceRoot":""}